name: Ecom Workflow

on:
  push:
    branches:
      - main

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      client_changed: ${{steps.client_changed.outputs.client}}
      server_changed: ${{steps.server_changed.outputs.server}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show changed files
        run: git diff --name-only ${{ github.event.before }} ${{ github.sha }}
      - name: Check for changes in client
        id: client_changed
        uses: dorny/paths-filter@v3
        with:
          filters: |
            client:
              - "client/**"

      - name: Check for changes in server
        id: server_changed
        uses: dorny/paths-filter@v3
        with:
          filters: |
            server:
              - 'backend/**/*'

      - name: Debug filter outputs
        run: |
          echo "Backend: ${{ steps.server_changed.outputs.server }}"

  client:
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.client_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  server:
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.server_changed == 'true'
    steps:
      - name: Debug Outputs
        run: |
          echo "Server Changed: ${{ needs.check-changes.outputs.server_changed }}"
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Creating Docker Image
        run: |
          docker build -t maity54321/ecom-server .
      
      - name: Pushing Docker Image
        env: 
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push maity54321/ecom-server
          docker logout

      - name: SSH Login and Deploy
        env:
          SSH_USERNAME: ${{secrets.SSH_USERNAME}}
          SSH_PASSWORD: ${{secrets.SSH_PASSWORD}}
          SSH_HOST: ${{secrets.SSH_HOST}}
        run: |
          sudo apt-get update -y
          sudo apt-get install sshpass
          sudo sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$SSH_HOST
          'sudo docker pull maity54321/ecom-server && cd ~/Documents/DeployBackend && sudo docker compose up -d --no-deps --build server && exit'
